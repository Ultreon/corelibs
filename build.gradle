apply plugin: 'maven-publish'

group 'io.github.ultreon.corelibs'
version '0.3.0'

mkdir("${rootProject.projectDir}/.mvnrepo")
apply plugin: 'java'
apply plugin: "java-library"

subprojects {
    apply plugin: 'java'
    apply plugin: "java-library"
    apply plugin: 'maven-publish'

    group 'io.github.ultreon.corelibs'

    archivesBaseName = "corelibs-$project.name"

    def admin = rootProject.hasProperty('sonatypeUsername')

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.0"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.0"

        implementation "org.jetbrains:annotations:$annotations_version"
    }

    processResources {
        from file("$rootProject.projectDir/LICENSE.md")
    }

    test {
        useJUnitPlatform()
    }

    java {
        withSourcesJar()
    }

    compileJava {
        sourceCompatibility "1.8"
        targetCompatibility "1.8"
    }

    jar.archiveBaseName = "corelibs-$project.name"
    sourcesJar.archiveBaseName = "corelibs-$project.name"

    publishing {
        publications {
            register('mavenJava', MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                url "file://${rootProject.projectDir}/.mvnrepo"
            }
        }
    }

    afterEvaluate {
        publish {
            dependsOn "build"
        }
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

afterEvaluate {
    javadoc {
        source(subprojects.collect { subproject ->
            subproject.sourceSets.main.allJava.sourceDirectories
        })
        title = "CoreLibs"
        description = "CoreLibs is the core library collection for Ultreon Team projects."
        setDestinationDir(file("$rootProject.projectDir/build/docs/javadoc"))
        // Configure the classpath
        classpath = files(subprojects.collect { subproject ->
            subproject.sourceSets.main.compileClasspath
        })
        (options as StandardJavadocDocletOptions).links(
            "https://javadoc.io/doc/org.jetbrains/annotations/$annotations_version",
        )
    }
}
